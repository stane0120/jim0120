-- 데이터 압축하기2 1번

SELECT DY, 
       TO_DATE(SUBSTR(VAL, 12), 'YYYY-MM-DD') AS OUT_DATE,
       TO_NUMBER(SUBSTR(VAL, 1, 10)) AS ORDER_QTY
FROM (
SELECT  DY, DY1,
        MAX(LPAD(SUM_QTY, 10, '0') || '-' || TO_CHAR(OUTBOUND_DATE, 'YYYYMMDD')) AS VAL
       FROM (SELECT TO_CHAR(OUTBOUND_DATE, 'DY') AS DY,
             TO_CHAR(OUTBOUND_DATE, 'D') AS DY1,
             M1.OUTBOUND_DATE, SUM(ORDER_QTY) AS SUM_QTY
             FROM LO_OUT_M M1
             JOIN LO_OUT_D D1 ON D1.INVOICE_NO = M1.INVOICE_NO                 
            WHERE M1.OUTBOUND_DATE LIKE '2019-09%' 
            GROUP BY TO_CHAR(OUTBOUND_DATE, 'DAY'), M1.OUTBOUND_DATE
      ) M1
        ORDER BY DY, DY1
) C1
ORDER BY DY1
;
       
-- 데이터 압축하기2 2번
SELECT MAX(M1.SUM_QTY) AS MAX_QTY,
       MIN(M1.SUM_QTY) AS MIN_QTY,
       TRUNC(AVG(M1.SUM_QTY)) AS AVG_QTY
FROM (
       SELECT M1.OUTBOUND_DATE,
       SUM(ORDER_QTY) AS SUM_QTY
       FROM LO_OUT_M M1
       JOIN LO_OUT_D D1 ON D1.INVOICE_NO = M1.INVOICE_NO
       WHERE OUTBOUND_DATE BETWEEN TO_DATE(:OUT_DATE)
                           AND TO_CHAR(TO_DATE(:OUT_DATE) + 7) 
       GROUP BY OUTBOUND_DATE
       ORDER BY OUTBOUND_DATE DESC
) M1)
;





       